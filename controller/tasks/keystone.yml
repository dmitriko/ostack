---
- name: Install minimal keystone requirements
  yum: name={{item}} state=present
  with_items:
    - python-keystoneclient
    - python-openstackclient
  tags: controller_keystone

- name: Install shade to manage OpenStack from Ansible
  pip: name=shade
  tags: controller_keystone

- name: Create keystone rc file
  template: src="keystonerc.j2" dest=/root/keystonerc
  tags: controller_keystone

- name: Install Keystone controller RPMs
  yum: name={{item}} state=present
  with_items:
    - openstack-utils
    - openstack-keystone
  when: is_running_keystone
  tags: controller_keystone

- name: Update keystone conf
  setosconf:
    dest=/etc/keystone/keystone.conf
    section={{ item.section }}
    option={{ item.option }}
    value={{ item.value }}
  with_items:
    - { section: "DEFAULT", option: "public_endpoint", value: "{{auth_url}}" }
    - { section: "DEFAULT", option: "admin_token", value: "{{admin_token}}" }
    - { section: "DEFAULT", option: "public_bind_host", value: "{{int_virtual_ip}}" }
    - { section: "DEFAULT", option: "admin_bind_host", value: "{{int_virtual_ip}}"}
    - { section: "sql", option: "connection", value: "mysql://keystone:{{keystone_db_pass}}@127.0.0.1/keystone"}
  when: is_running_keystone
  tags: controller_keystone

- name: Create Keystone DB
  mysql_db: name=keystone state=present login_user=root login_password={{mysql_root_pass}}
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Create Keystone DB user
  mysql_user:
    name=keystone
    priv=keystone.*:ALL
    password={{keystone_db_pass}}
    state=present
    login_user=root
    login_password={{mysql_root_pass}}
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Keystone DB sync
  command: keystone-manage db_sync
  become_user: keystone
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure Keystone service running/enabled
  service: name=openstack-keystone state=running enabled=True
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure admin/service tenants are exist
  keystone_user:
    tenant={{item.name}}
    tenant_description="{{item.description}}"
    token={{admin_token}}
    endpoint="{{auth_uri}}"
  with_items:
    - { name: 'admin', description: "Default tenant" }
    - { name: 'service', description: "Service tenant" }
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure admin user
  keystone_user:
    user=admin
    tenant=admin
    password={{admin_pass}}
    token={{admin_token}}
    endpoint="{{auth_uri}}"
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure admin user has admin role
  keystone_user:
    role=admin
    user=admin
    tenant=admin
    token={{admin_token}}
    endpoint="{{auth_uri}}"
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure users for each service are exist
  keystone_user:
    user={{item.user}}
    tenant=service
    password={{service_pass}}
    token={{admin_token}}
    endpoint="{{auth_uri}}"
  with_items: openstack_services
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure service users got admin role in Service tenant
  keystone_user:
    role=admin
    user={{item.user}}
    tenant=service
    token={{admin_token}}
    endpoint="{{auth_uri}}"
  with_items: openstack_services
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure each service has endpoint in current region
  keystone_service:
    name="{{item.name}}"
    type="{{item.type}}"
    description="{{item.description}}"
    public_url="{{item.description}}"
    internal_url="{{item.internal_url}}"
    admin_url="{{item.internal_url}}"
    region="{{region}}"
    token="{{admin_token}}"
    endpoint="{{auth_uri}}"
  with_items: openstack_services
  when: is_master_controller
  tags: controller_keystone

- name: Ensure Keystone controler has Nginx proxy setup
  debug: msg=implement me
  when: is_master_controller and is_running_keystone
  tags: controller_keystone

- name: Ensure each service has Nginx proxy setup
  debug: msg=implement me
  when: is_master_controller
  tags: controller_keystone
